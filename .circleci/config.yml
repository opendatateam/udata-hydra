---
version: 2.1

parameters:
  python-version:
    type: string
    default: "3.11"
  publish-branch:
    type: string
    default: "main"
    description: "Branch to publish to PyPI and trigger the Gitlab CI/CD pipeline when pushed to"
  deploy-env:
    type: string
    default: "dev"
    description: "Environment to deploy to"
  cache-prefix:
    type: string
    default: "py-cache-v2"
    description: "Prefix used for cache keys to store and restore Python dependencies. Increment this value to invalidate existing caches."

jobs:
  lint-and-test:
    docker:
      - image: ghcr.io/astral-sh/uv:python<< pipeline.parameters.python-version >>-bookworm-slim
      - image: cimg/postgres:11.15
        environment:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
    parallelism: 4  # Only tests will be parallelized
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apt-get update && apt-get install -y \
              cmake libgeos-dev libmagic1
      - run:
          name: Install Python dependencies
          command: uv venv && uv pip install -e ".[dev]"
      - run:
          name: Lint and format code
          command: |
            .venv/bin/ruff check --select I .
            .venv/bin/ruff format --check .
      - run:
          name: Run tests
          environment:
            DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
            UDATA_INSTANCE_NAME: udata
          command: |
            # Find and split tests
            TESTFILES=$(find tests -name "test_*.py" | circleci tests split --split-by=timings)
            # Debug: Show what's in TESTFILES
            echo "Test files assigned to the executor ${CIRCLE_NODE_INDEX}/${CIRCLE_NODE_TOTAL}:"
            echo "$TESTFILES"
            # Run the found tests
            if [ -n "$TESTFILES" ]; then
              .venv/bin/pytest --junitxml=reports/python/tests.xml -p no:sugar --color=yes $TESTFILES
            else
              echo "No tests to run in this split"
              exit 1

  build:
    docker:
      - image: ghcr.io/astral-sh/uv:python<< pipeline.parameters.python-version >>-bookworm-slim
    steps:
      - checkout
      - run:
          name: Install Python dependencies
          command: uv venv && uv pip install -e ".[dev]"
      - run:
          name: Set the version
          command: |
            # Get base version from pyproject.toml
            BASE_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")

            if [[ $CIRCLE_TAG ]]; then
                # This is a tagged release, version has been handled upstream
                RELEASE_VERSION=$CIRCLE_TAG
            elif [[ $CIRCLE_BRANCH == << pipeline.parameters.publish-branch >> ]]; then
                # for main branches, can't add the commit hash since it's not a valid format for publishing
                RELEASE_VERSION=${BASE_VERSION}${CIRCLE_BUILD_NUM}
            else
                # for feature branches, add the commit hash
                RELEASE_VERSION=${BASE_VERSION}${CIRCLE_BUILD_NUM}+${CIRCLE_SHA1:0:7}
            fi
            echo "$RELEASE_VERSION" > version.txt
      - run:
          name: Display build info for debugging
          command: |
            RELEASE_VERSION=$(cat version.txt)
            echo "Building a wheel release with version $RELEASE_VERSION"
            echo "Build number: $CIRCLE_BUILD_NUM"
            echo "Commit hash: ${CIRCLE_SHA1:0:7}"
            echo "Git tag: $CIRCLE_TAG"
      - run:
          name: Build package
          command: |
            RELEASE_VERSION=$(cat version.txt)
            # Update version in pyproject.toml
            sed -i "s/version = \".*\"/version = \"$RELEASE_VERSION\"/" pyproject.toml
            # Install build and build the package
            uv pip install build
            .venv/bin/python -m build
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - .
            - version.txt

  publish:
    docker:
      - image: ghcr.io/astral-sh/uv:python<< pipeline.parameters.python-version >>-bookworm-slim
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish on PyPI
          command: |
            # Install twine for publishing to PyPI
            uv pip install twine
            # Upload all distribution files
            .venv/bin/twine upload --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}" dist/*

  trigger-gitlab-pipeline:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Configure the SSH simple-scaffold repository private key
          command: |
            mkdir -p ~/.ssh
            # SCAFFOLD_PRIVATE_KEY is the private key related to the "simple-scaffold" GitLab repository, so that it can be cloned
            # CircleCI doesn't accept multiple lines in a single environment variable, so the multiline private key must be base64 encoded, and then decoded here
            echo "$SCAFFOLD_PRIVATE_KEY" | base64 -d > ~/.ssh/id_ed25519
            chmod 600 ~/.ssh/id_ed25519
            ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts
      - run:
          name: Configure Git
          command: |
            git config --global user.email "root@data.gouv.fr"
            git config --global user.name "datagouv"
      - run:
          name: Clone simple-scaffold repository
          command: |
            git clone --quiet --depth 1 $SCAFFOLD_REPO_SSH_URL scaffold
      - run:
          name: Trigger Gitlab CI/CD pipeline for Hydra to deploy to dev environment
          command: |
            RELEASE_VERSION=$(cat version.txt)
            cd scaffold
            # Run the script that triggers the Gitlab CI/CD pipeline.
            # Must have GITLAB_API_TOKEN set in the environment
            # GITLAB_API_TOKEN is the token related to the "infra" GitLab repository, so that the Gitlab CI/CD pipeline can be triggered
            # The script args are, in order:
            # - hydra: the name of the project to deploy (APP_NAME)
            # - $RELEASE_VERSION: the version to deploy (RELEASE_VERSION)
            # - << pipeline.parameters.deploy-env >>: the environment to deploy to (ENV)
            # - "": the deploy variables (VARS)
            ./scripts/gitlab-ci-pipeline.sh hydra $RELEASE_VERSION << pipeline.parameters.deploy-env >> ""

workflows:
  build-test-deploy:
    jobs:
      - lint-and-test
      - build:
          requires:
            - lint-and-test
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
                - /[0-9]+(\.[0-9]+)+/
                - /rc[0-9]+/
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
          context: org-global
      - publish:
          requires:
            - build
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
          context:
            - org-global
            - gitlab-trigger
      - trigger-gitlab-pipeline:
          requires:
            - publish
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
          context:
            - org-global
            - gitlab-trigger
